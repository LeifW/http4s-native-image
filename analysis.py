#!/usr/bin/env python
#
# Generate graphs of the results given the data generated by the experiment scripts.
# Requires numpy and matplotlib

import numpy as np
import matplotlib.pyplot as plt


## Startup time and memory usage
##
native_data = np.genfromtxt('ping-server-native.csv', delimiter=',', skip_header=1)
native_time = native_data[:,0]
native_mem = native_data[:, 1]

jvm_data = np.genfromtxt('ping-server-jvm.csv', delimiter=',', skip_header=1)
jvm_time = jvm_data[:,0]
jvm_mem = jvm_data[:, 1]

plt.plot(native_time, label='Native Image')
plt.plot(jvm_time, label='JVM')
plt.ylabel('Startup time (ms)')
plt.xlabel('Run')
plt.title("Time from Start to first HTTP Response")
plt.legend()
plt.savefig('startup-time.png')
plt.show()

plt.plot(native_mem, label='Native Image')
plt.plot(jvm_mem, label='JVM')
plt.ylabel('Memory usage (KB)')
plt.xlabel('Run')
plt.title("Resident Set Size after first HTTP Response")
plt.legend()
plt.savefig('resident-set-size.png')
plt.show()


## Response times under sustained load
##
native_image_sustained = np.genfromtxt('native-image-sustained.csv', delimiter=',', skip_header=1)
jvm_cold_sustained = np.genfromtxt('jvm-cold-sustained.csv', delimiter=',', skip_header=1)
jvm_warm_sustained = np.genfromtxt('jvm-warm-sustained-8.csv', delimiter=',', skip_header=1)

plt.plot(native_image_sustained[0:99, 0], native_image_sustained[0:99,1], label="Native Image")
plt.plot(jvm_cold_sustained[0:99,0], jvm_cold_sustained[0:99,1], label="JVM (Cold)")
plt.plot(jvm_warm_sustained[0:99,0], jvm_warm_sustained[0:99,1], label="JVM (Warm)")
plt.ylabel("Response time (ms)")
plt.xlabel("Percentile")
plt.title("0-99 Percentile response times over 10000 requests")
plt.legend()
plt.savefig('lower-sustained-response-time.png')
plt.show()

plt.plot(native_image_sustained[95:100, 0], native_image_sustained[95:100,1], label="Native Image")
plt.plot(jvm_cold_sustained[95:100,0], jvm_cold_sustained[95:100,1], label="JVM (Cold)")
plt.plot(jvm_warm_sustained[95:100,0], jvm_warm_sustained[95:100,1], label="JVM (Warm)")
plt.ylabel("Response time (ms)")
plt.xlabel("Percentile")
plt.title("95-100 Percentile response times over 10000 requests")
plt.legend()
plt.savefig('upper-sustained-response-time.png')
plt.show()


## JVM Response time over time
jvm_warm_sustained_1 = np.genfromtxt('jvm-warm-sustained-1.csv', delimiter=',', skip_header=1)
jvm_warm_sustained_2 = np.genfromtxt('jvm-warm-sustained-2.csv', delimiter=',', skip_header=1)
jvm_warm_sustained_3 = np.genfromtxt('jvm-warm-sustained-3.csv', delimiter=',', skip_header=1)
jvm_warm_sustained_4 = np.genfromtxt('jvm-warm-sustained-4.csv', delimiter=',', skip_header=1)
jvm_warm_sustained_5 = np.genfromtxt('jvm-warm-sustained-5.csv', delimiter=',', skip_header=1)
jvm_warm_sustained_6 = np.genfromtxt('jvm-warm-sustained-6.csv', delimiter=',', skip_header=1)
jvm_warm_sustained_7 = np.genfromtxt('jvm-warm-sustained-7.csv', delimiter=',', skip_header=1)
jvm_warm_sustained_8 = np.genfromtxt('jvm-warm-sustained-8.csv', delimiter=',', skip_header=1)

plt.plot(jvm_warm_sustained_1[0:95,0], jvm_warm_sustained_1[0:95,1], label="After 10,000 requests")
plt.plot(jvm_warm_sustained_2[0:95,0], jvm_warm_sustained_2[0:95,1], label="After 20,000 requests")
plt.plot(jvm_warm_sustained_3[0:95,0], jvm_warm_sustained_3[0:95,1], label="After 30,000 requests")
plt.plot(jvm_warm_sustained_4[0:95,0], jvm_warm_sustained_4[0:95,1], label="After 40,000 requests")
plt.plot(jvm_warm_sustained_5[0:95,0], jvm_warm_sustained_5[0:95,1], label="After 50,000 requests")
plt.plot(jvm_warm_sustained_6[0:95,0], jvm_warm_sustained_6[0:95,1], label="After 60,000 requests")
plt.plot(jvm_warm_sustained_7[0:95,0], jvm_warm_sustained_7[0:95,1], label="After 70,000 requests")
plt.plot(jvm_warm_sustained_8[0:95,0], jvm_warm_sustained_8[0:95,1], label="After 80,000 requests")
plt.ylabel("Response time (ms)")
plt.xlabel("Percentile")
plt.title("JVM 0-95 Percentile response times over time")
plt.legend()
plt.savefig('warming-sustained-response-time.png')
plt.show()


## Response times under sustained load for various JVM settings

jvm_untuned = np.genfromtxt('jvm-untuned.csv', delimiter=',', skip_header=1)
jvm_gc_tuned = np.genfromtxt('jvm-gc-tuned.csv', delimiter=',', skip_header=1)
jvm_compiler_tuned = np.genfromtxt('jvm-compiler-tuned.csv', delimiter=',', skip_header=1)
jvm_both_tuned = np.genfromtxt('jvm-both-tuned.csv', delimiter=',', skip_header=1)

plt.plot(jvm_untuned[0:99, 0], jvm_untuned[0:99,1], label="Untuned JVM")
plt.plot(jvm_gc_tuned[0:99,0], jvm_gc_tuned[0:99,1], label="GC tuned JVM")
plt.plot(jvm_compiler_tuned[0:99,0], jvm_compiler_tuned[0:99,1], label="Compiler tuned JVM")
plt.plot(jvm_both_tuned[0:99,0], jvm_both_tuned[0:99,1], label="Both tuned JVM")
plt.ylabel("Response time (ms)")
plt.xlabel("Percentile")
plt.title("0-99 Percentile response times over 10000 requests")
plt.legend()
plt.savefig('lower-tuned-response-time.png')
plt.show()

plt.plot(jvm_untuned[95:100, 0], jvm_untuned[95:100,1], label="Untuned JVM")
plt.plot(jvm_gc_tuned[95:100,0], jvm_gc_tuned[95:100,1], label="GC tuned JVM")
plt.plot(jvm_compiler_tuned[95:100,0], jvm_compiler_tuned[95:100,1], label="Compiler tuned JVM")
plt.plot(jvm_both_tuned[95:100,0], jvm_both_tuned[95:100,1], label="Both tuned JVM")
plt.ylabel("Response time (ms)")
plt.xlabel("Percentile")
plt.title("95-100 Percentile response times over 10000 requests")
plt.legend()
plt.savefig('upper-tuned-response-time.png')
plt.show()
